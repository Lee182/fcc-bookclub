# const BSON = require('bson')
# const bson = new BSON()
# note commented out BSON code
eventSystem = require('#/app/browser+node/eventSystem.js')
# function BlobtoJSON(blob) {
#   return new Promise(function(resolve, reject){
#     var reader = new FileReader()
#     reader.readAsArrayBuffer(blob)
#     reader.on('loadend', function(){
#       var data = bson.deserialize( ArrayBuffertoBuffer(reader.result) )
#       resolve(data)
#     })
#   })
# }
# function ArrayBuffertoBuffer(ab) {
#   var buf = new Buffer(ab.byteLength)
#   var view = new Uint8Array(ab)
#   for (var i = 0; i < buf.length; ++i) {
#     buf[i] = view[i]
#   }
#   return buf
# }

module.exports = (path) ->
  e = eventSystem()
  o = {}

  connect = ->
    o.ws = new WebSocket(path)
    # 'ws://localhost:3000'
    o.ws.on 'open', ->
      e.emit 'connection'

    o.ws.on 'close', ->
      e.emit 'close'

    o.ws.on 'message', (ws_event) ->
      data = JSON.parse(ws_event.data)
      if typeof data.req_res == 'string'
        reqs_made[data.req_res].resolve data.data
        delete reqs_made[ws_event.data.req_res_rand]

      e.emit 'message', data
      # if (ws_event.data.toString() !== '[object Blob]') {return}
      # BlobtoJSON(ws_event.data).then(function(data){
      #   e.emit('message', data)
      # })

  o.reconnect = ->
    if o.ws then o.ws.close()
    connect()

  o.send = (data) ->
    o.ws.send JSON.stringify(data)
    # o.ws.send( bson.serialize(data, {ignoreUndefined: false}) )
    return

  o.on = e.on
  o.off = e.off
  # req res http pattern
  reqs_made = {}

  o.req = (data) ->
    new Promise (resolve, reject) ->
      rand = Date.now() + '-' + Math.random()
      reqs_made[rand] =
        req_data: data
        resolve: resolve
        reject: reject
        res_data: undefined
      o.send
        req_res: rand
        data: data
      
  connect()
  o

# comms.send
# comms.on('connection')
# comms.on('message')
# comms.on('close')
# comms.reconnect()

# ---
# generated by js2coffee 2.2.0